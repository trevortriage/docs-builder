@using Elastic.Markdown.Myst.FrontMatter
@inherits RazorSlice<Elastic.Markdown.Myst.FrontMatter.ApplicableTo>
<p class="applies">
	<span class="applies-to-label"></span>
	@if (Model.Stack is not null)
	{
		@RenderProduct("Elastic Stack", Model.Stack)
	}
	@if (Model.Deployment is not null)
	{
		if (Model.Deployment.Ece is not null)
		{
			@RenderProduct("ECE", Model.Deployment.Ece)
		}
		if (Model.Deployment.Eck is not null)
		{
			@RenderProduct("ECK", Model.Deployment.Eck)
		}
		if (Model.Deployment.Ess is not null)
		{
			@RenderProduct("Elastic Cloud Hosted", Model.Deployment.Ess)
		}
		if (Model.Deployment.Self is not null)
		{
			@RenderProduct("Self Managed", Model.Deployment.Self)
		}
	}
	@if (Model.Serverless is not null)
	{
		if (Model.Serverless.AllProjects is not null)
		{
			@RenderProduct("Serverless", Model.Serverless.AllProjects)
		}
		else
		{
			if (Model.Serverless.Elasticsearch is not null)
			{
				@RenderProduct("Serverless Elasticsearch", Model.Serverless.Elasticsearch)
			}
			if (Model.Serverless.Observability is not null)
			{
				@RenderProduct("Serverless Observability", Model.Serverless.Observability)
			}
			if (Model.Serverless.Security is not null)
			{
				@RenderProduct("Serverless Security", Model.Serverless.Security)
			}

		}

	}
	@if (Model.Product is not null)
	{
		@RenderProduct("", Model.Product)
	}
</p>

@functions {

	private static string GetLifeCycleName(ProductLifecycle cycle)
	{
		switch (cycle)
		{
			case ProductLifecycle.TechnicalPreview:
				return "Technical Preview";
			case ProductLifecycle.Beta:
				return "Beta";
			case ProductLifecycle.Development:
				return "Development";
			case ProductLifecycle.Deprecated:
				return "Deprecated";
			case ProductLifecycle.Coming:
				return "Coming";
			case ProductLifecycle.Discontinued:
				return "Discontinued";
			case ProductLifecycle.Unavailable:
				return "Unavailable";
			case ProductLifecycle.GenerallyAvailable:
				return "GA";
			default:
				throw new ArgumentOutOfRangeException(nameof(cycle), cycle, null);
		}
	}

	private IHtmlContent RenderProduct(string name, AppliesCollection applications)
	{
		foreach (var applicability in applications)
		{
			<span class="applicable-info">
				@name
				@if (applicability.Lifecycle != ProductLifecycle.GenerallyAvailable)
				{
					<span class="text-emerald-500">@GetLifeCycleName(applicability.Lifecycle)</span>
				}
				@if (applicability.Version is not null and not AllVersions)
				{
					<span class="text-red-70">(@applicability.Version)</span>
				}
			</span>
		}
		return HtmlString.Empty;
	}
}